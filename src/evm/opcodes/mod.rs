//! EVM Opcodes Implementation
//! 
//! This module contains all EVM opcode implementations organized by category.

pub mod traits;
pub mod stack;
pub mod arithmetic;
pub mod comparison;
pub mod bitwise;
pub mod memory;
pub mod storage;
pub mod control;
pub mod context;
pub mod crypto;
pub mod system;

use crate::{gas::costs, types::*};

/// EVM Opcode enumeration
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u8)]
pub enum Opcode {
    // Arithmetic (0x00-0x0f)
    STOP = 0x00,
    ADD = 0x01,
    MUL = 0x02,
    SUB = 0x03,
    DIV = 0x04,
    SDIV = 0x05,
    MOD = 0x06,
    SMOD = 0x07,
    ADDMOD = 0x08,
    MULMOD = 0x09,
    EXP = 0x0a,
    SIGNEXTEND = 0x0b,
    
    // Comparison (0x10-0x1f)
    LT = 0x10,
    GT = 0x11,
    SLT = 0x12,
    SGT = 0x13,
    EQ = 0x14,
    ISZERO = 0x15,
    AND = 0x16,
    OR = 0x17,
    XOR = 0x18,
    NOT = 0x19,
    BYTE = 0x1a,
    SHL = 0x1b,
    SHR = 0x1c,
    SAR = 0x1d,
    
    // Crypto (0x20)
    SHA3 = 0x20,
    
    // Context (0x30-0x3f)
    ADDRESS = 0x30,
    BALANCE = 0x31,
    ORIGIN = 0x32,
    CALLER = 0x33,
    CALLVALUE = 0x34,
    CALLDATALOAD = 0x35,
    CALLDATASIZE = 0x36,
    CALLDATACOPY = 0x37,
    CODESIZE = 0x38,
    CODECOPY = 0x39,
    GASPRICE = 0x3a,
    EXTCODESIZE = 0x3b,
    EXTCODECOPY = 0x3c,
    RETURNDATASIZE = 0x3d,
    RETURNDATACOPY = 0x3e,
    EXTCODEHASH = 0x3f,
    
    // Block (0x40-0x4f)
    BLOCKHASH = 0x40,
    COINBASE = 0x41,
    TIMESTAMP = 0x42,
    NUMBER = 0x43,
    DIFFICULTY = 0x44,
    GASLIMIT = 0x45,
    CHAINID = 0x46,
    SELFBALANCE = 0x47,
    BASEFEE = 0x48,
    
    // Storage & Memory (0x50-0x5f)
    POP = 0x50,
    MLOAD = 0x51,
    MSTORE = 0x52,
    MSTORE8 = 0x53,
    SLOAD = 0x54,
    SSTORE = 0x55,
    JUMP = 0x56,
    JUMPI = 0x57,
    PC = 0x58,
    MSIZE = 0x59,
    GAS = 0x5a,
    JUMPDEST = 0x5b,
    
    // Push (0x60-0x7f)
    PUSH1 = 0x60,
    PUSH2 = 0x61,
    PUSH3 = 0x62,
    PUSH4 = 0x63,
    PUSH5 = 0x64,
    PUSH6 = 0x65,
    PUSH7 = 0x66,
    PUSH8 = 0x67,
    PUSH9 = 0x68,
    PUSH10 = 0x69,
    PUSH11 = 0x6a,
    PUSH12 = 0x6b,
    PUSH13 = 0x6c,
    PUSH14 = 0x6d,
    PUSH15 = 0x6e,
    PUSH16 = 0x6f,
    PUSH17 = 0x70,
    PUSH18 = 0x71,
    PUSH19 = 0x72,
    PUSH20 = 0x73,
    PUSH21 = 0x74,
    PUSH22 = 0x75,
    PUSH23 = 0x76,
    PUSH24 = 0x77,
    PUSH25 = 0x78,
    PUSH26 = 0x79,
    PUSH27 = 0x7a,
    PUSH28 = 0x7b,
    PUSH29 = 0x7c,
    PUSH30 = 0x7d,
    PUSH31 = 0x7e,
    PUSH32 = 0x7f,
    
    // Dup (0x80-0x8f)
    DUP1 = 0x80,
    DUP2 = 0x81,
    DUP3 = 0x82,
    DUP4 = 0x83,
    DUP5 = 0x84,
    DUP6 = 0x85,
    DUP7 = 0x86,
    DUP8 = 0x87,
    DUP9 = 0x88,
    DUP10 = 0x89,
    DUP11 = 0x8a,
    DUP12 = 0x8b,
    DUP13 = 0x8c,
    DUP14 = 0x8d,
    DUP15 = 0x8e,
    DUP16 = 0x8f,
    
    // Swap (0x90-0x9f)
    SWAP1 = 0x90,
    SWAP2 = 0x91,
    SWAP3 = 0x92,
    SWAP4 = 0x93,
    SWAP5 = 0x94,
    SWAP6 = 0x95,
    SWAP7 = 0x96,
    SWAP8 = 0x97,
    SWAP9 = 0x98,
    SWAP10 = 0x99,
    SWAP11 = 0x9a,
    SWAP12 = 0x9b,
    SWAP13 = 0x9c,
    SWAP14 = 0x9d,
    SWAP15 = 0x9e,
    SWAP16 = 0x9f,
    
    // Logging (0xa0-0xa4)
    LOG0 = 0xa0,
    LOG1 = 0xa1,
    LOG2 = 0xa2,
    LOG3 = 0xa3,
    LOG4 = 0xa4,
    
    // System (0xf0-0xff)
    CREATE = 0xf0,
    CALL = 0xf1,
    CALLCODE = 0xf2,
    RETURN = 0xf3,
    DELEGATECALL = 0xf4,
    CREATE2 = 0xf5,
    STATICCALL = 0xfa,
    REVERT = 0xfd,
    INVALID = 0xfe,
    SELFDESTRUCT = 0xff,
}

impl Opcode {
    /// Convert a byte to an opcode
    pub fn from_byte(byte: u8) -> Option<Self> {
        match byte {
            0x00 => Some(Opcode::STOP),
            0x01 => Some(Opcode::ADD),
            0x02 => Some(Opcode::MUL),
            0x03 => Some(Opcode::SUB),
            0x04 => Some(Opcode::DIV),
            0x05 => Some(Opcode::SDIV),
            0x06 => Some(Opcode::MOD),
            0x07 => Some(Opcode::SMOD),
            0x08 => Some(Opcode::ADDMOD),
            0x09 => Some(Opcode::MULMOD),
            0x0a => Some(Opcode::EXP),
            0x0b => Some(Opcode::SIGNEXTEND),
            0x10 => Some(Opcode::LT),
            0x11 => Some(Opcode::GT),
            0x12 => Some(Opcode::SLT),
            0x13 => Some(Opcode::SGT),
            0x14 => Some(Opcode::EQ),
            0x15 => Some(Opcode::ISZERO),
            0x16 => Some(Opcode::AND),
            0x17 => Some(Opcode::OR),
            0x18 => Some(Opcode::XOR),
            0x19 => Some(Opcode::NOT),
            0x1a => Some(Opcode::BYTE),
            0x1b => Some(Opcode::SHL),
            0x1c => Some(Opcode::SHR),
            0x1d => Some(Opcode::SAR),
            0x20 => Some(Opcode::SHA3),
            0x30 => Some(Opcode::ADDRESS),
            0x31 => Some(Opcode::BALANCE),
            0x32 => Some(Opcode::ORIGIN),
            0x33 => Some(Opcode::CALLER),
            0x34 => Some(Opcode::CALLVALUE),
            0x35 => Some(Opcode::CALLDATALOAD),
            0x36 => Some(Opcode::CALLDATASIZE),
            0x37 => Some(Opcode::CALLDATACOPY),
            0x38 => Some(Opcode::CODESIZE),
            0x39 => Some(Opcode::CODECOPY),
            0x3a => Some(Opcode::GASPRICE),
            0x3b => Some(Opcode::EXTCODESIZE),
            0x3c => Some(Opcode::EXTCODECOPY),
            0x3d => Some(Opcode::RETURNDATASIZE),
            0x3e => Some(Opcode::RETURNDATACOPY),
            0x3f => Some(Opcode::EXTCODEHASH),
            0x40 => Some(Opcode::BLOCKHASH),
            0x41 => Some(Opcode::COINBASE),
            0x42 => Some(Opcode::TIMESTAMP),
            0x43 => Some(Opcode::NUMBER),
            0x44 => Some(Opcode::DIFFICULTY),
            0x45 => Some(Opcode::GASLIMIT),
            0x46 => Some(Opcode::CHAINID),
            0x47 => Some(Opcode::SELFBALANCE),
            0x48 => Some(Opcode::BASEFEE),
            0x50 => Some(Opcode::POP),
            0x51 => Some(Opcode::MLOAD),
            0x52 => Some(Opcode::MSTORE),
            0x53 => Some(Opcode::MSTORE8),
            0x54 => Some(Opcode::SLOAD),
            0x55 => Some(Opcode::SSTORE),
            0x56 => Some(Opcode::JUMP),
            0x57 => Some(Opcode::JUMPI),
            0x58 => Some(Opcode::PC),
            0x59 => Some(Opcode::MSIZE),
            0x5a => Some(Opcode::GAS),
            0x5b => Some(Opcode::JUMPDEST),
            0x60 => Some(Opcode::PUSH1),
            0x61 => Some(Opcode::PUSH2),
            0x62 => Some(Opcode::PUSH3),
            0x63 => Some(Opcode::PUSH4),
            0x64 => Some(Opcode::PUSH5),
            0x65 => Some(Opcode::PUSH6),
            0x66 => Some(Opcode::PUSH7),
            0x67 => Some(Opcode::PUSH8),
            0x68 => Some(Opcode::PUSH9),
            0x69 => Some(Opcode::PUSH10),
            0x6a => Some(Opcode::PUSH11),
            0x6b => Some(Opcode::PUSH12),
            0x6c => Some(Opcode::PUSH13),
            0x6d => Some(Opcode::PUSH14),
            0x6e => Some(Opcode::PUSH15),
            0x6f => Some(Opcode::PUSH16),
            0x70 => Some(Opcode::PUSH17),
            0x71 => Some(Opcode::PUSH18),
            0x72 => Some(Opcode::PUSH19),
            0x73 => Some(Opcode::PUSH20),
            0x74 => Some(Opcode::PUSH21),
            0x75 => Some(Opcode::PUSH22),
            0x76 => Some(Opcode::PUSH23),
            0x77 => Some(Opcode::PUSH24),
            0x78 => Some(Opcode::PUSH25),
            0x79 => Some(Opcode::PUSH26),
            0x7a => Some(Opcode::PUSH27),
            0x7b => Some(Opcode::PUSH28),
            0x7c => Some(Opcode::PUSH29),
            0x7d => Some(Opcode::PUSH30),
            0x7e => Some(Opcode::PUSH31),
            0x7f => Some(Opcode::PUSH32),
            0x80 => Some(Opcode::DUP1),
            0x81 => Some(Opcode::DUP2),
            0x82 => Some(Opcode::DUP3),
            0x83 => Some(Opcode::DUP4),
            0x84 => Some(Opcode::DUP5),
            0x85 => Some(Opcode::DUP6),
            0x86 => Some(Opcode::DUP7),
            0x87 => Some(Opcode::DUP8),
            0x88 => Some(Opcode::DUP9),
            0x89 => Some(Opcode::DUP10),
            0x8a => Some(Opcode::DUP11),
            0x8b => Some(Opcode::DUP12),
            0x8c => Some(Opcode::DUP13),
            0x8d => Some(Opcode::DUP14),
            0x8e => Some(Opcode::DUP15),
            0x8f => Some(Opcode::DUP16),
            0x90 => Some(Opcode::SWAP1),
            0x91 => Some(Opcode::SWAP2),
            0x92 => Some(Opcode::SWAP3),
            0x93 => Some(Opcode::SWAP4),
            0x94 => Some(Opcode::SWAP5),
            0x95 => Some(Opcode::SWAP6),
            0x96 => Some(Opcode::SWAP7),
            0x97 => Some(Opcode::SWAP8),
            0x98 => Some(Opcode::SWAP9),
            0x99 => Some(Opcode::SWAP10),
            0x9a => Some(Opcode::SWAP11),
            0x9b => Some(Opcode::SWAP12),
            0x9c => Some(Opcode::SWAP13),
            0x9d => Some(Opcode::SWAP14),
            0x9e => Some(Opcode::SWAP15),
            0x9f => Some(Opcode::SWAP16),
            0xa0 => Some(Opcode::LOG0),
            0xa1 => Some(Opcode::LOG1),
            0xa2 => Some(Opcode::LOG2),
            0xa3 => Some(Opcode::LOG3),
            0xa4 => Some(Opcode::LOG4),
            0xf0 => Some(Opcode::CREATE),
            0xf1 => Some(Opcode::CALL),
            0xf2 => Some(Opcode::CALLCODE),
            0xf3 => Some(Opcode::RETURN),
            0xf4 => Some(Opcode::DELEGATECALL),
            0xf5 => Some(Opcode::CREATE2),
            0xfa => Some(Opcode::STATICCALL),
            0xfd => Some(Opcode::REVERT),
            0xfe => Some(Opcode::INVALID),
            0xff => Some(Opcode::SELFDESTRUCT),
            _ => None,
        }
    }
    
    /// Get the number of immediate bytes this opcode reads
    pub fn immediate_bytes(&self) -> usize {
        match self {
            Opcode::PUSH1 => 1,
            Opcode::PUSH2 => 2,
            Opcode::PUSH3 => 3,
            Opcode::PUSH4 => 4,
            Opcode::PUSH5 => 5,
            Opcode::PUSH6 => 6,
            Opcode::PUSH7 => 7,
            Opcode::PUSH8 => 8,
            Opcode::PUSH9 => 9,
            Opcode::PUSH10 => 10,
            Opcode::PUSH11 => 11,
            Opcode::PUSH12 => 12,
            Opcode::PUSH13 => 13,
            Opcode::PUSH14 => 14,
            Opcode::PUSH15 => 15,
            Opcode::PUSH16 => 16,
            Opcode::PUSH17 => 17,
            Opcode::PUSH18 => 18,
            Opcode::PUSH19 => 19,
            Opcode::PUSH20 => 20,
            Opcode::PUSH21 => 21,
            Opcode::PUSH22 => 22,
            Opcode::PUSH23 => 23,
            Opcode::PUSH24 => 24,
            Opcode::PUSH25 => 25,
            Opcode::PUSH26 => 26,
            Opcode::PUSH27 => 27,
            Opcode::PUSH28 => 28,
            Opcode::PUSH29 => 29,
            Opcode::PUSH30 => 30,
            Opcode::PUSH31 => 31,
            Opcode::PUSH32 => 32,
            Opcode::SWAP1 => 1,
            Opcode::SWAP2 => 2,
            Opcode::SWAP3 => 3,
            Opcode::SWAP4 => 4,
            Opcode::SWAP5 => 5,
            Opcode::SWAP6 => 6,
            Opcode::SWAP7 => 7,
            Opcode::SWAP8 => 8,
            Opcode::SWAP9 => 9,
            Opcode::SWAP10 => 10,
            Opcode::SWAP11 => 11,
            Opcode::SWAP12 => 12,
            Opcode::SWAP13 => 13,
            Opcode::SWAP14 => 14,
            Opcode::SWAP15 => 15,
            Opcode::SWAP16 => 16,
            _ => 0,
        }
    }

        /// Get the number of immediate bytes this opcode reads
        pub fn access_depth_bytes(&self) -> usize {
            match self {
                Opcode::SWAP1 => 1,
                Opcode::SWAP2 => 2,
                Opcode::SWAP3 => 3,
                Opcode::SWAP4 => 4,
                Opcode::SWAP5 => 5,
                Opcode::SWAP6 => 6,
                Opcode::SWAP7 => 7,
                Opcode::SWAP8 => 8,
                Opcode::SWAP9 => 9,
                Opcode::SWAP10 => 10,
                Opcode::SWAP11 => 11,
                Opcode::SWAP12 => 12,
                Opcode::SWAP13 => 13,
                Opcode::SWAP14 => 14,
                Opcode::SWAP15 => 15,
                Opcode::SWAP16 => 16,
                Opcode::DUP1 => 0,
                Opcode::DUP2 => 1,
                Opcode::DUP3 => 2,
                Opcode::DUP4 => 3,
                Opcode::DUP5 => 4,
                Opcode::DUP6 => 5,
                Opcode::DUP7 => 6,
                Opcode::DUP8 => 7,
                Opcode::DUP9 => 8,
                Opcode::DUP10 => 9,
                Opcode::DUP11 => 10,
                Opcode::DUP12 => 11,
                Opcode::DUP13 => 12,
                Opcode::DUP14 => 13,
                Opcode::DUP15 => 14,
                Opcode::DUP16 => 15,
                _ => 0,
            }
        }
    

    pub fn is_push(&self) -> bool {
        matches!(self, Opcode::PUSH1 | Opcode::PUSH2 | Opcode::PUSH3 | Opcode::PUSH4 |
            Opcode::PUSH5 | Opcode::PUSH6 | Opcode::PUSH7 | Opcode::PUSH8 |
            Opcode::PUSH9 | Opcode::PUSH10 | Opcode::PUSH11 | Opcode::PUSH12 |
            Opcode::PUSH13 | Opcode::PUSH14 | Opcode::PUSH15 | Opcode::PUSH16 |
            Opcode::PUSH17 | Opcode::PUSH18 | Opcode::PUSH19 | Opcode::PUSH20 |
            Opcode::PUSH21 | Opcode::PUSH22 | Opcode::PUSH23 | Opcode::PUSH24 |
            Opcode::PUSH25 | Opcode::PUSH26 | Opcode::PUSH27 | Opcode::PUSH28 |
            Opcode::PUSH29 | Opcode::PUSH30 | Opcode::PUSH31 | Opcode::PUSH32)
    }

    pub fn is_swap(&self) -> bool {
        matches!(self, Opcode::SWAP1 | Opcode::SWAP2 | Opcode::SWAP3 | Opcode::SWAP4 |
            Opcode::SWAP5 | Opcode::SWAP6 | Opcode::SWAP7 | Opcode::SWAP8 |
            Opcode::SWAP9 | Opcode::SWAP10 | Opcode::SWAP11 | Opcode::SWAP12 |
            Opcode::SWAP13 | Opcode::SWAP14 | Opcode::SWAP15 | Opcode::SWAP16)
    }

    pub fn is_dup(&self) -> bool {
        matches!(self, Opcode::DUP1 | Opcode::DUP2 | Opcode::DUP3 | Opcode::DUP4 |
            Opcode::DUP5 | Opcode::DUP6 | Opcode::DUP7 | Opcode::DUP8 |
            Opcode::DUP9 | Opcode::DUP10 | Opcode::DUP11 | Opcode::DUP12 |
            Opcode::DUP13 | Opcode::DUP14 | Opcode::DUP15 | Opcode::DUP16)
    }

    pub fn is_stack_opcode(&self) -> bool {
        self.is_push() || self.is_swap() || self.is_dup() || matches!(self, Opcode::POP)
    }

    pub fn is_arithmetic_opcode(&self) -> bool {
        matches!(self, Opcode::ADD | Opcode::MUL | Opcode::SUB | Opcode::DIV |
            Opcode::SDIV | Opcode::MOD | Opcode::SMOD | Opcode::ADDMOD |
            Opcode::MULMOD | Opcode::EXP | Opcode::SIGNEXTEND | Opcode::LT |
            Opcode::GT | Opcode::SLT | Opcode::SGT | Opcode::EQ | Opcode::ISZERO |
            Opcode::AND | Opcode::OR | Opcode::XOR | Opcode::NOT | Opcode::BYTE |
            Opcode::SHL | Opcode::SHR | Opcode::SAR)
    }
    
    /// Check if this opcode is a jump instruction
    pub fn is_jump(&self) -> bool {
        matches!(self, Opcode::JUMP | Opcode::JUMPI)
    }
    
    /// The only opcodes that modify the PC are JUMP and PUSH
    pub fn modifies_pc(&self) -> bool {
        self.is_jump() || self.is_push()
    }
    
    /// Get gas cost for this opcode
    pub fn gas_cost(&self) -> Gas {
        match self {
            Opcode::STOP => costs::STOP,
            Opcode::ADD => costs::ADD,
            Opcode::MUL => costs::MUL,
            Opcode::SUB => costs::SUB,
            Opcode::DIV => costs::DIV,
            Opcode::SDIV => costs::SDIV,
            Opcode::MOD => costs::MOD,
            Opcode::SMOD => costs::SMOD,
            Opcode::ADDMOD => costs::ADDMOD,
            Opcode::MULMOD => costs::MULMOD,
            Opcode::EXP => costs::EXP,
            Opcode::SIGNEXTEND => costs::SIGNEXTEND,
            Opcode::LT => costs::LT,
            Opcode::GT => costs::GT,
            Opcode::SLT => costs::SLT,
            Opcode::SGT => costs::SGT,
            Opcode::EQ => costs::EQ,
            Opcode::ISZERO => costs::ISZERO,
            Opcode::AND => costs::AND,
            Opcode::OR => costs::OR,
            Opcode::XOR => costs::XOR,
            Opcode::NOT => costs::NOT,
            Opcode::BYTE => costs::BYTE,
            Opcode::SHL => costs::SHL,
            Opcode::SHR => costs::SHR,
            Opcode::SAR => costs::SAR,
            Opcode::SHA3 => costs::KECCAK256,
            Opcode::ADDRESS => costs::ADDRESS,
            Opcode::BALANCE => costs::BALANCE,
            Opcode::ORIGIN => costs::ORIGIN,
            Opcode::CALLER => costs::CALLER,
            Opcode::CALLVALUE => costs::CALLVALUE,
            Opcode::CALLDATALOAD => costs::CALLDATALOAD,
            Opcode::CALLDATASIZE => costs::CALLDATASIZE,
            Opcode::CALLDATACOPY => costs::CALLDATACOPY,
            Opcode::CODESIZE => costs::CODESIZE,
            Opcode::CODECOPY => costs::CODECOPY,
            Opcode::GASPRICE => costs::GASPRICE,
            Opcode::EXTCODESIZE => costs::EXTCODESIZE,
            Opcode::EXTCODECOPY => costs::EXTCODECOPY,
            Opcode::RETURNDATASIZE => costs::RETURNDATASIZE,
            Opcode::RETURNDATACOPY => costs::RETURNDATACOPY,
            Opcode::EXTCODEHASH => costs::EXTCODEHASH,
            Opcode::BLOCKHASH => costs::BLOCKHASH,
            Opcode::COINBASE => costs::COINBASE,
            Opcode::TIMESTAMP => costs::TIMESTAMP,
            Opcode::NUMBER => costs::NUMBER,
            Opcode::DIFFICULTY => costs::DIFFICULTY,
            Opcode::GASLIMIT => costs::GASLIMIT,
            Opcode::CHAINID => costs::CHAINID,
            Opcode::SELFBALANCE => costs::SELFBALANCE,
            Opcode::BASEFEE => costs::BASEFEE,
            Opcode::POP => costs::POP,
            Opcode::MLOAD => costs::MLOAD,
            Opcode::MSTORE => costs::MSTORE,
            Opcode::MSTORE8 => costs::MSTORE8,
            Opcode::SLOAD => costs::SLOAD,
            Opcode::SSTORE => costs::SSTORE,
            Opcode::JUMP => costs::JUMP,
            Opcode::JUMPI => costs::JUMPI,
            Opcode::PC => costs::PC,
            Opcode::MSIZE => costs::MSIZE,
            Opcode::GAS => costs::GAS,
            Opcode::JUMPDEST => costs::JUMPDEST,
            Opcode::PUSH1 => costs::PUSH1,
            Opcode::PUSH2 => costs::PUSH2,
            Opcode::PUSH3 => costs::PUSH3,
            Opcode::PUSH4 => costs::PUSH4,
            Opcode::PUSH5 => costs::PUSH5,
            Opcode::PUSH6 => costs::PUSH6,
            Opcode::PUSH7 => costs::PUSH7,
            Opcode::PUSH8 => costs::PUSH8,
            Opcode::PUSH9 => costs::PUSH9,
            Opcode::PUSH10 => costs::PUSH10,
            Opcode::PUSH11 => costs::PUSH11,
            Opcode::PUSH12 => costs::PUSH12,
            Opcode::PUSH13 => costs::PUSH13,
            Opcode::PUSH14 => costs::PUSH14,
            Opcode::PUSH15 => costs::PUSH15,
            Opcode::PUSH16 => costs::PUSH16,
            Opcode::PUSH17 => costs::PUSH17,
            Opcode::PUSH18 => costs::PUSH18,
            Opcode::PUSH19 => costs::PUSH19,
            Opcode::PUSH20 => costs::PUSH20,
            Opcode::PUSH21 => costs::PUSH21,
            Opcode::PUSH22 => costs::PUSH22,
            Opcode::PUSH23 => costs::PUSH23,
            Opcode::PUSH24 => costs::PUSH24,
            Opcode::PUSH25 => costs::PUSH25,
            Opcode::PUSH26 => costs::PUSH26,
            Opcode::PUSH27 => costs::PUSH27,
            Opcode::PUSH28 => costs::PUSH28,
            Opcode::PUSH29 => costs::PUSH29,
            Opcode::PUSH30 => costs::PUSH30,
            Opcode::PUSH31 => costs::PUSH31,
            Opcode::PUSH32 => costs::PUSH32,
            Opcode::DUP1 => costs::DUP1,
            Opcode::DUP2 => costs::DUP2,
            Opcode::DUP3 => costs::DUP3,
            Opcode::DUP4 => costs::DUP4,
            Opcode::DUP5 => costs::DUP5,
            Opcode::DUP6 => costs::DUP6,
            Opcode::DUP7 => costs::DUP7,
            Opcode::DUP8 => costs::DUP8,
            Opcode::DUP9 => costs::DUP9,
            Opcode::DUP10 => costs::DUP10,
            Opcode::DUP11 => costs::DUP11,
            Opcode::DUP12 => costs::DUP12,
            Opcode::DUP13 => costs::DUP13,
            Opcode::DUP14 => costs::DUP14,
            Opcode::DUP15 => costs::DUP15,
            Opcode::DUP16 => costs::DUP16,
            Opcode::SWAP1 => costs::SWAP1,
            Opcode::SWAP2 => costs::SWAP2,
            Opcode::SWAP3 => costs::SWAP3,
            Opcode::SWAP4 => costs::SWAP4,
            Opcode::SWAP5 => costs::SWAP5,
            Opcode::SWAP6 => costs::SWAP6,
            Opcode::SWAP7 => costs::SWAP7,
            Opcode::SWAP8 => costs::SWAP8,
            Opcode::SWAP9 => costs::SWAP9,
            Opcode::SWAP10 => costs::SWAP10,
            Opcode::SWAP11 => costs::SWAP11,
            Opcode::SWAP12 => costs::SWAP12,
            Opcode::SWAP13 => costs::SWAP13,
            Opcode::SWAP14 => costs::SWAP14,
            Opcode::SWAP15 => costs::SWAP15,
            Opcode::SWAP16 => costs::SWAP16,
            Opcode::LOG0 => costs::LOG0,
            Opcode::LOG1 => costs::LOG1,
            Opcode::LOG2 => costs::LOG2,
            Opcode::LOG3 => costs::LOG3,
            Opcode::LOG4 => costs::LOG4,
            Opcode::CREATE => costs::CREATE,
            Opcode::CALL => costs::CALL,
            Opcode::CALLCODE => costs::CALLCODE,
            Opcode::RETURN => costs::RETURN,
            Opcode::DELEGATECALL => costs::DELEGATECALL,
            Opcode::CREATE2 => costs::CREATE2,
            Opcode::STATICCALL => costs::STATICCALL,
            Opcode::REVERT => costs::REVERT,
            Opcode::INVALID => 0, // INVALID opcode costs 0 gas but causes revert
            Opcode::SELFDESTRUCT => costs::SELFDESTRUCT,
        }
    }
}